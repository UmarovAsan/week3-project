/* Нормализация блочной модели */
*,
*::before,
*::after {
	box-sizing: border-box;
}

/*
	Убираем внутренние отступы слева тегам списков,
	у которых есть атрибут class
*/
:where(ul, ol):where([class]) {
	padding-left: 0;
}

/*
	Убираем внешние отступы body и двум другим тегам,
	у которых есть атрибут class
*/
body,
:where(blockquote, figure):where([class]) {
	margin: 0;
}

/*
	Убираем внешние отступы вертикали нужным тегам,
	у которых есть атрибут class
*/
:where(h1, h2, h3, h4, h5, h6, p, ul, ol, dl):where([class]) {
	margin-block: 0;
}

:where(dd[class]) {
	margin-left: 0;
}

:where(fieldset[class]) {
	margin-left: 0;
	padding: 0;
	border: none;
}

/*
	Убираем стандартный маркер маркированному списку,
	у которого есть атрибут class
*/
:where(ul[class]) {
	list-style: none;
}

/*
	Обнуляем вертикальные внешние отступы параграфа,
	объявляем локальную переменную для внешнего отступа вниз,
	чтобы избежать взаимодействие с более сложным селектором
*/
p {
	--paragraphMarginBottom: 24px;

	margin-block: 0;
}

/*
	Внешний отступ вниз для параграфа без атрибута class,
	который расположен не последним среди своих соседних элементов
*/
p:where(:not([class]):not(:last-child)) {
	margin-bottom: var(--paragraphMarginBottom);
}

/*
	Упрощаем работу с изображениями
*/
img {
	display: block;
	max-width: 100%;
}

/*
	Наследуем свойства шрифт для полей ввода
*/
input,
textarea,
select,
button {
	font: inherit;
}

html {
	/*
		Пригодится в большинстве ситуаций
		(когда, например, нужно будет "прижать" футер к низу сайта)
	*/
	height: 100%;
	/*
		Плавный скролл
	*/
	scroll-behavior: smooth;
}

body {
	/*
		Пригодится в большинстве ситуаций
		(когда, например, нужно будет "прижать" футер к низу сайта)
	*/
	min-height: 100%;
	/*
		Унифицированный интерлиньяж
	*/
	line-height: 1.5;
}

/*
	Приводим к единому цвету svg-элементы
*/
svg *[fill] {
	fill: currentColor;
}
svg *[stroke] {
	stroke: currentColor;
}

/*
	Чиним баг задержки смены цвета при взаимодействии с svg-элементами
*/
svg * {
	transition-property: fill, stroke;
}

/*
	Удаляем все анимации и переходы для людей,
	которые предпочитают их не использовать
*/
@media (prefers-reduced-motion: reduce) {
	* {
		animation-duration: 0.01ms !important;
		animation-iteration-count: 1 !important;
		transition-duration: 0.01ms !important;
		scroll-behavior: auto !important;
	}
}

/* black: #000000
white: #ffffff
light grey: #d8d9db
buttons on hover: #ebebeb
button active state: #bbbcbe
function buttons: #df974c
function buttons on hover: #dfb07e
function button active state: #dd8d37 */

.wrapper {
	display: flex;
	flex-direction: column;
	align-items: center;
	width: 100%;
	max-width: 400px;
	font-family: Arial, Helvetica, sans-serif;
	font-size: 1.5rem;
	margin: auto;
}

.bg-black {
	background-color: #000000;
	color: #ffffff;
}

.bg-orange {
	background-color: #df974c;
	color: #ffffff;
}

.bg-light-grey {
	background-color: #d8d9db;
	color: #000000;
}

.screen {
	width: 100%;
	max-width: 400px;
}

.calc-screen {
	height: 75px;
	padding: 10px;
}

.calc-screen p {
	display: flex;
	height: 100%;
	justify-content: flex-end;
	align-items: center;
}

.calc-buttons {
	width: 100%;
	max-width: 400px;
	display: grid;
	grid-template-areas:
		"c c left-arrow division"
		"seven eight nine multiplication"
		"four five six minus"
		"one two three plus"
		"zero zero zero equals";
	grid-template-columns: repeat(4, 1fr);
	grid-template-rows: repeat(5, 100px);
	grid-gap: 0;
}

.btn {
	width: 100%;
	height: 100%;
	display: flex;
	justify-content: center;
	align-items: center;
	text-align: center;
	cursor: pointer;
	user-select: none;
	border: 1px solid #000000;
}

.btn.c {
	grid-area: c;
}

.btn.left-arrow {
	grid-area: left-arrow;
}

.btn.division {
	grid-area: division;
}

.btn.seven {
	grid-area: seven;
}

.btn.eight {
	grid-area: eight;
}

.btn.nine {
	grid-area: nine;
}

.btn.multiplication {
	grid-area: multiplication;
}

.btn.four {
	grid-area: four;
}

.btn.five {
	grid-area: five;
}

.btn.six {
	grid-area: six;
}

.btn.minus {
	grid-area: minus;
}

.btn.one {
	grid-area: one;
}

.btn.two {
	grid-area: two;
}

.btn.three {
	grid-area: three;
}

.btn.plus {
	grid-area: plus;
}

.btn.zero {
	grid-area: zero;
}

.btn.equals {
	grid-area: equals;
}

.bg-light-grey:hover {
	background-color: #ebebeb;
}

.bg-light-grey:active {
	background-color: #bbbcbe;
}

.bg-orange:hover {
	background-color: #dfb07e;
}

.bg-orange:active {
	background-color: #dd8d37;
}